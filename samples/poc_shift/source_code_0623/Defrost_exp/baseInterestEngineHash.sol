// SPDX-License-Identifier: GPL-3.0-or-later
pragma solidity >=0.7.0 <0.8.0;
import "SafeMath.sol";
/**
 * @title interest engine.
 * @dev Calculate interest on asset.
 *
 */
abstract contract baseInterestEngineHash{
    using SafeMath for uint256;

    //Special decimals for calculation
    uint256 constant internal rayDecimals = 1e27;
    uint256 constant internal InterestDecimals = 1e36;
    uint256 internal totalAsset;
    // Maximum amount of debt that can be generated with this collateral type
    uint256 public assetCeiling;       // [rad]
    // Minimum amount of debt that must be generated by a SAFE using this collateral
    uint256 public assetFloor;         // [rad]
    //interest rate
    int256 internal interestRate;
    uint256 internal interestInterval = 3600;
    struct assetInfo{
        uint256 originAsset;
        uint256 baseAsset;
    }
    // asset balance
    mapping(bytes32=>assetInfo) public assetInfoMap;

    // latest time to settlement
    uint256 internal latestSettleTime;
    // Accumulate interest rate.
    uint256 internal accumulatedRate;

    event SetInterestInfo(address indexed sender,int256 _interestRate,uint256 _interestInterval);
    event AddAsset(bytes32 indexed recieptor,uint256 amount);
    event SubAsset(bytes32 indexed account,uint256 amount,uint256 subOrigin);
    /**
     * @dev retrieve Interest informations.
     * @return distributed Interest rate and distributed time interval.
     */
    function getInterestInfo()external view returns(int256,uint256){
        return (interestRate,interestInterval);
    }

    /**
     * @dev Set mineCoin mine info, only foundation owner can invoked.
     * @param _interestRate mineCoin distributed amount
     * @param _interestInterval mineCoin distributied time interval
     */
    function _setInterestInfo(int256 _interestRate,uint256 _interestInterval,uint256 maxRate,uint256 minRate)internal {
        if (accumulatedRate == 0){
            accumulatedRate = rayDecimals;
        }
        require(_interestRate<=1e27 && _interestRate>=-1e27,"input interest rate is too large");
        require(_interestInterval>0,"input mine Interval must larger than zero");
        uint256 newLimit = calAccumulatedRate(rayDecimals,31536000,_interestRate,_interestInterval);
        require(newLimit<=maxRate && newLimit>=minRate,"input interest rate is out of range");
        _interestSettlement();
        interestRate = _interestRate;
        interestInterval = _interestInterval;
        emit SetInterestInfo(msg.sender,_interestRate,_interestInterval);
    }
    function totalAssetAmount()internal virtual view returns(uint256){
        return calInterestAmount(totalAsset,newAccumulatedRate());
    }
    function getAssetBalance(bytes32 account)internal virtual view returns(uint256){
        return calInterestAmount(assetInfoMap[account].baseAsset,newAccumulatedRate());
    }
    /**
     * @dev mint mineCoin to account when account add collateral to collateral pool, only manager contract can modify database.
     * @param account user's account
     * @param amount the mine shared amount
     */
    function addAsset(bytes32 account,uint256 amount) internal {
        assetInfoMap[account].originAsset = assetInfoMap[account].originAsset.add(amount);
        uint256 _currentRate = newAccumulatedRate();
        mintAsset(account,calBaseAmount(amount,_currentRate));
        require(calInterestAmount(assetInfoMap[account].baseAsset,_currentRate)+1 >= assetFloor, "Debt is below the limit");
        require(calInterestAmount(totalAsset,_currentRate) <= assetCeiling, "vault debt is overflow");
        emit AddAsset(account,amount);
    }
    /**
     * @dev repay user's debt and taxes.
     * @param amount repay amount.
     */
    function subAsset(bytes32 account,uint256 amount)internal returns(uint256) {
        uint256 originBalance = assetInfoMap[account].originAsset;
        uint256 _currentRate = newAccumulatedRate();
        uint256 assetAndInterest = calInterestAmount(assetInfoMap[account].baseAsset,_currentRate);
        
        uint256 _subAsset;
        if(assetAndInterest == amount){
            _subAsset = originBalance;
            assetInfoMap[account].originAsset = 0;
            burnAsset(account,assetInfoMap[account].baseAsset);
        }else if(assetAndInterest > amount){
            _subAsset = originBalance.mul(amount)/assetAndInterest;
            burnAsset(account,calBaseAmount(amount,_currentRate));
            require(calInterestAmount(assetInfoMap[account].baseAsset,_currentRate)+1 >= assetFloor, "Debt is below the limit");
            assetInfoMap[account].originAsset = originBalance.sub(_subAsset);
        }else{
            require(false,"overflow asset balance");
        }
        emit SubAsset(account,amount,_subAsset);
        return _subAsset;
    }
    //Accumulate interest rate when the insterest Rate is changed.
    function _interestSettlement()internal{
        uint256 _interestInterval = interestInterval;
        if (_interestInterval>0){
            accumulatedRate = newAccumulatedRate();
            latestSettleTime = currentTime()/_interestInterval*_interestInterval;
        }else{
            latestSettleTime = currentTime();
        }
    }
    //Calculate current accumulated interest
    function newAccumulatedRate()internal view returns (uint256){
        return calAccumulatedRate(accumulatedRate,currentTime().sub(latestSettleTime),interestRate,interestInterval);
    }
    //Calculate accumulated interest function
    function calAccumulatedRate(uint256 baseRate,uint256 timeSpan,
        int256 _interestRate,uint256 _interestInterval)internal virtual pure returns (uint256);
    function currentTime() internal virtual view returns (uint256){
        return block.timestamp;
    }
    function calBaseAmount(uint256 amount, uint256 _interestRate) internal pure returns(uint256){
        return amount.mul(InterestDecimals)/_interestRate;
    }
    function calInterestAmount(uint256 amount, uint256 _interestRate) internal pure returns(uint256){
        return amount.mul(_interestRate)/InterestDecimals;
    }
    function mintAsset(bytes32 account,uint256 amount)internal{
        assetInfoMap[account].baseAsset = assetInfoMap[account].baseAsset.add(amount);
        totalAsset = totalAsset.add(amount);
    }
    function burnAsset(bytes32 account,uint256 amount) internal{
        assetInfoMap[account].baseAsset = assetInfoMap[account].baseAsset.sub(amount);
        totalAsset = totalAsset.sub(amount);
    }
}